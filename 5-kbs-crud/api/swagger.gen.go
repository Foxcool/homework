// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Service version
	Version string `json:"version"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// response message
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// UserParams defines model for User_params.
type UserParams struct {

	// User's email
	Email *string `json:"email,omitempty"`

	// User's firstname
	FirstName *string `json:"firstName,omitempty"`

	// User's lastname
	LastName *string `json:"lastName,omitempty"`

	// User's middlename
	MiddleName *string `json:"middleName,omitempty"`

	// User's phone
	Mobile *string `json:"mobile,omitempty"`
}

// UserParamsWithId defines model for User_params_with_id.
type UserParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор пользователя
	ID *string `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
	// Embedded fields due to inline allOf schema
}

// Email defines model for email.
type Email string

// Phone defines model for phone.
type Phone string

// UserID defines model for userID.
type UserID string

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// User200 defines model for User_200.
type User200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserParamsWithId `json:"data,omitempty"`
}

// User400 defines model for User_400.
type User400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			Email      *string `json:"email,omitempty"`
			FirstName  *string `json:"firstName,omitempty"`
			LastName   *string `json:"lastName,omitempty"`
			MiddleName *string `json:"middleName,omitempty"`
			Mobile     *string `json:"mobile,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// If the field is provided users will be filtered by phone
	Phone *Phone `json:"phone,omitempty"`

	// If the field is provided users will be filtered by email
	Email *Email `json:"email,omitempty"`
}

// PostUsersRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody User

// PatchUserRequestBody defines body for PatchUser for application/json ContentType.
type PatchUserJSONRequestBody User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Users collection
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete user
	// (DELETE /users/{userID})
	DeleteUser(ctx echo.Context, userID UserID) error
	// User info
	// (GET /users/{userID})
	GetUser(ctx echo.Context, userID UserID) error
	// Update user
	// (PATCH /users/{userID})
	PatchUser(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "phone" -------------

	err = runtime.BindQueryParameter("form", true, false, "phone", ctx.QueryParams(), &params.Phone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, userID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userID)
	return err
}

// PatchUser converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUser(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/users", wrapper.GetUsers)
	router.POST("/users", wrapper.PostUsers)
	router.DELETE("/users/:userID", wrapper.DeleteUser)
	router.GET("/users/:userID", wrapper.GetUser)
	router.PATCH("/users/:userID", wrapper.PatchUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYzW7cNhB+FYEN0ENp79pZJe6e8mOjddH8AK57CQyDK40sxhKpkJSdxUJAG7S3AgV6",
	"6mMURYMGDeq+gvaNCpL6tbQbO95N05PX1HBm+M3MxxnOkMfjhDNgSqLxDCVEkBgUCPMfxIRG+ocP0hM0",
	"UZQzNEb7gaNCcAIKke9Q6SSCn1EffCeVIKRzTqPImejvkQIBvjOZOlYTRlTvf5GCmCKMGIkBjVH5TXoh",
	"xESbU9NEf5BKUHaCsgyjJOQMVuKJ1dTvSfltmSda8/5u15VDCcKhPjBFAwqitJAQFdYGis0YCXiRUgE+",
	"GiuRwjKLmRUGqR5wn4KJi7al/3qcKWBK/yRJElGPaGcGz6X2aNZQSqLoSYDGz2boloAAjdEngzruAysn",
	"B1rtsckAibKjynTtp12RCWfSOvKASDgeDUdrcGZPCC6M7sKVNtyPuXICnjIfZbh0w12jG26/G/vsjETU",
	"dx6BCnntizscrs0XrXuBLwoEI5EjQZyBcECLa5dMXLfX4tJB6nkgJcrwDCWCJyBUkaM+UUYPVRCbhStm",
	"3vE5VeExNVgWtUCEIFNTfMUCnzwHT/WjYOpQG3c8HkXgmeUShNEa46J1axgu+dgBxoTFkm1r3SQSsafo",
	"7CmJGFgao/GzijOr+sQopgxhlDL6IgV0hBG8JHESGdaxa/gyt2AUUCHVY8NNte7is9XYUlR96SiKyGr0",
	"xNT3I1iJJj6hUUtLsXJD0LpZ2LPSm5nfVgEuSzMrib8i0+69oledknQRvpw0IGSRMe1tByDOqAdOKdA8",
	"2vbmcHPYe7Ka7p9Vqo86x8PIZPzVC8ScbCFFXDZslrVVqoy71li3+C/jm/8y/z5/7eT/5G/zi/mP+UXl",
	"aVn31yjnpYVbclqHojCKQUpyYvOuArwT+XdhX2rBpdHLcBzX5+phxfrYow9/7HZQysx1GkeqcNljiqqp",
	"w6q7fHW4jJbj4n7UuNhuwrk1e7T3zZdPdjODEIkifg79GPVj4C7DwF1pSbz3UfubllXlgbuoPsq+5aYU",
	"tsYkODh8+HDv4OBGWJTHfDd51o0cao4BizuRbtf1qazGvMY1KkHc03gSNt30eGzv3K+BnagQjbcwYmkU",
	"kYmWtZPQ8h6l16qRMBNW0/JXPGTXt9ZsZHqNaYGOrV0O1zfV7nV6jVmRjrn9M8L4GfXC9zBatUW9BssJ",
	"uLb12db27ZF75+7O58PrWmsQU2u0bKVY1e+3SrGddH3zdv5r/kf+Ov97/ip/M/8hf5P/lf82f5VfzL/T",
	"HcBF/nb+U/5nfpH/bpZf52/nP7fO5Q69kR/skA0yubu1MfJHw40d1w02fN91bwc77h2yPbxK94evMVPj",
	"Waty68xu5F0rL3DV6BdxO1owA1EW8HKyIZ5qVCrSf+75RJwG/OWmkaueI+5HcCoJ84XzgEyAnepPqdCb",
	"QqWS8WDQ2tY/at1/uo/acS6WqtYUbZl+M8OIJ8BIQtEY3S5a0ISo0IR4YF5s9K8TMO7r+JuWad9HY/QF",
	"qEMjgFtPVAtIuxYZ2IReFKWGoIVLE2PrhaMYm/s2V3KDasDOMCp6i+UbqgeLDCP3KhaqVwUzM6RxTMS0",
	"gFs2B12MFDnRwNg3In3VJVz2APqUywrR+n1putiTxhOUOS/Kbo7UVTeM/gNoHwogCsxDYhfVDBcJO5jZ",
	"J73MElQECrpY75r1Q6vpg2M2ujJmow8OskVmAch4KRWsAMqPGRn7nGzZulvS16LA4tFZU1tClBf2kIFe",
	"rkD9v5DBRx2+xF/CHlrUjDs2fq0rlwgv3Ax5DOdcnA64SiVJEhO8QsusvL0t8EfZvwEAAP//rAPDpcQZ",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

