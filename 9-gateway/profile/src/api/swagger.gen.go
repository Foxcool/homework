// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Service version
	Version string `json:"version"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// response message
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// response message
	Message string `json:"message"`
}

// UserParams defines model for User_params.
type UserParams struct {

	// User's email
	Email *string `json:"email,omitempty"`

	// User's firstname
	FirstName *string `json:"firstName,omitempty"`

	// User's lastname
	LastName *string `json:"lastName,omitempty"`

	// User's middlename
	MiddleName *string `json:"middleName,omitempty"`

	// User's phone
	Mobile *string `json:"mobile,omitempty"`
}

// UserParamsWithId defines model for User_params_with_id.
type UserParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор пользователя
	ID *string `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
	// Embedded fields due to inline allOf schema
}

// Email defines model for email.
type Email string

// Phone defines model for phone.
type Phone string

// UserID defines model for userID.
type UserID string

// Auth200 defines model for Auth_200.
type Auth200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]struct {
		// Embedded fields due to inline allOf schema

		// User ID
		UserID string `json:"userID"`
	} `json:"data,omitempty"`
}

// Auth400 defines model for Auth_400.
type Auth400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			Login    *string `json:"login,omitempty"`
			Password *string `json:"password,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// User200 defines model for User_200.
type User200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserParamsWithId `json:"data,omitempty"`
}

// User400 defines model for User_400.
type User400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			Email      *string `json:"email,omitempty"`
			FirstName  *string `json:"firstName,omitempty"`
			LastName   *string `json:"lastName,omitempty"`
			MiddleName *string `json:"middleName,omitempty"`
			Mobile     *string `json:"mobile,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Auth defines model for Auth.
type Auth struct {
	// Embedded fields due to inline allOf schema

	// User's login
	Login string `json:"login"`

	// User's password
	Password string `json:"password"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
	// Embedded fields due to inline allOf schema

	// User's password
	Password *string `json:"password,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// If the field is provided users will be filtered by phone
	Phone *Phone `json:"phone,omitempty"`

	// If the field is provided users will be filtered by email
	Email *Email `json:"email,omitempty"`
}

// AuthRequestBody defines body for Auth for application/json ContentType.
type AuthJSONRequestBody Auth

// PostUsersRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody User

// PatchUserRequestBody defines body for PatchUser for application/json ContentType.
type PatchUserJSONRequestBody User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User's authentication
	// (POST /auth)
	Auth(ctx echo.Context) error
	// Users collection
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete user
	// (DELETE /users/{userID})
	DeleteUser(ctx echo.Context, userID UserID) error
	// User info
	// (GET /users/{userID})
	GetUser(ctx echo.Context, userID UserID) error
	// Update user
	// (PATCH /users/{userID})
	PatchUser(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Auth converts echo context to params.
func (w *ServerInterfaceWrapper) Auth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Auth(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "phone" -------------

	err = runtime.BindQueryParameter("form", true, false, "phone", ctx.QueryParams(), &params.Phone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, userID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userID)
	return err
}

// PatchUser converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUser(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.Auth)
	router.GET("/users", wrapper.GetUsers)
	router.POST("/users", wrapper.PostUsers)
	router.DELETE("/users/:userID", wrapper.DeleteUser)
	router.GET("/users/:userID", wrapper.GetUser)
	router.PATCH("/users/:userID", wrapper.PatchUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZXW/bthr+KwJPgXNx5NhOpCbxVT8SnJOD9QPIspsiCBjpdcRGIlWSSmoEArZiuxsw",
	"YFf7GcOwYsWKZX9B/kcDqW+bduzEbtPcJKH4fvB5P/jo1RXyWBQzClQKNLhCMeY4Aglc/wcRJqH6wwfh",
	"cRJLwigaoIOhJQOwhgRC3yLCijm7ID74ViKAC+uShKF1qp6HEjj41unIyjXZiCj5NwnwEbIRxRGgASqf",
	"CS+ACCtzchSrB0JyQs9QmtooDhiFlXiSazJ7Uj6b54nSfLA37cqRAG4RH6gkQwK8tBBjGdQGCmEbcXiT",
	"EA4+GkiewDyLab4ZhHzCfAI6Lo8TGajfHqMSqFR/4jgOiYeVM93XQnl01VCKw/DFEA1eXaGYsxi4LBSF",
	"7IxQ81n+Laz8qY3gLY7isPQf2Sgi9CugZ8qJvj3psY1iLMQl4/5MxdWGpu63xc9N+tMmeq9Q6WSl89hG",
	"kkitUuF0onw+0XktUKWMnb4GT6L0ONUIK79uCegDDkM0QP/q1oXUzfeJ7lHDdGpPgr9imGgShvhU7clT",
	"aho2w9knMzFfETGjok61k81ebw3oHCaeB8KEjI+l1kMkRGJe/s4tRl1oNXDurrvT39nd7mB/2+04/c1h",
	"Z9fBbsf1tlzswQ4ePvTRTdlWGDw2gFktYc7xaDbgbU8Vvqpn5FhaHEQSSlVEGnhnLcDvc8641q2gn3By",
	"KhigducJ21q/wCHxcX6MmX0FaBIp3Ao4G2Dq9FVA1hGqNs3tKCtROR0cw4oxYN9Ux7Y0Msq9J1jAidPr",
	"rzFW/Rnpo0vI8oES8BuuOGt0xTG78pxJa8gS2nTDXaMbrtmNA6oT03oGMmC1L+4aK0npnuGLBE5xaAng",
	"F8DrhNEXw2fvqgteXSeXRAYnRGN5mxanm7EybnksDMHTyyUIX2qHq6hx2Y5KFjvRjWyUUPImgXZbKtYM",
	"nW5IuJDPNVs0tLolWmaIV6MnIr4fwko0sVMStrQUK3cEbZW9PC2puA6y6hzT5EKtWiVJUsyznTTARZEx",
	"bbFD4BfEA6vc0Dza5kZvo3cj+Sglp9mHjXTGL14g+mQzW8SkYb3c4NW5senin8Q3+3n8Xfbeyv7OPmbX",
	"4x+y68rTsu6XKOe5hVv2tKkWZaMIhMBned5VgE9F/ibsSy12aXQSjpP6XEZyWF/kn/zY7aCUmWs1jlTh",
	"Ut6ekp0DXQEo6rxz4XDuNRz7VBI5smhFbVaXJs58XNx7jUtOrqwHV8/2v/7fi71UI4TDkF2CGSMzBu48",
	"DNyVdog7VISJw60qD9xZ7aKkcXft6GtMgsOjp0/3Dw/vhEV5zJvvkprXouZYZTYxM45USpbWHmk9Unhi",
	"OtrwWLTsXGWCshmt6h16BNi0/H8W0OWtNXmdeWqHDbb2GCxvqk39jMbyLVPmDi4wZRfEC25htGKJ5plY",
	"MaKtbf2nv7nluA+3d3Z7t5mJFYnYHtUh0+vPnDmUaQaV/ZL9nr3P/hq/yz6Mv88+ZH9mv47fZdfjbxUh",
	"us4+jn/M/sius9/08vvs4/in9ryq5zn+cAd38Ol2v+P4Tq+z47rDju+77tZwx32IN3uLkGF7uRlls3Lr",
	"zG7kXSsv7Oq9p4jb8YxXQkKHrHzRw55sVCpSvx75mJ8P2dsNva+alz8O4Vxg6nPrCT4Feq4eJVwJBVLG",
	"g263JWZ+83z88gC141wsVUwd9TX9Tm3EYqA4JmiAtgpGHmMZ6BB3cTF0j5nQ7qv4awZ54BdzPNQc1Y9m",
	"vWG3pvldLTc5dC0mA2bpYl+3msymNnIWFnBKgf7NAtVYSwu4Cwu4SsBdxKVqNKNfvJIownxU1zpuzUZV",
	"EPGZUHmpQTtWMl39oUcZOgNDVP4L8khvsFtftmZcpfWWbt5mZtVOY2OexOq6Wj6C1RToc+ArmtOYGlr9",
	"JUQREHOav2SiQnTpXNe607sjtaiA8xmgfcoBS7CKD2UTqFYJ273KPySk+bURgoRprPf0+lGu6ZNj5iyM",
	"mfPJQc6RmQGyPbcVrADK+4xM/hU6v0OnS3qpFlh86lKtLcbSCwzNQC1XoH4pzeBehy/253QPtVW/hObx",
	"axEhzL1gI2ARXDJ+3mUyETiOdfAKLVclpyqAr/7PGchx+k8AAAD//2k4QdoLIgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

